----QUIT----2020-06-29T10:47:39.890105+02:00 Pharo7.0.5-0-32bit-fd8c156.image priorSource: 0!----QUIT----2020-06-29T10:47:54.496471+02:00 Pharo7.0.5-0-32bit-fd8c156.image priorSource: 0!Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/21/2022 16:46'!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 16:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !!LightsOut class methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 12:29'!iniciarJuego|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[ ^UIManager default alert: 'Juego Cerrado '].! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:31'!cantClicks	^ UIManager default alert: 'Ganaste con ', (cantClicks)asString  , ' clicks.'! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:43'!tamaño|tam|"Se pide al usuario que elija el tamaño del tablero"tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out').	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'initialize' stamp: 'Mauri 11/18/2022 20:02'!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Alternativo') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').self modoJuego: opcion.self tamaño.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 12:01'!cerrar^self delete ! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Juannie 11/16/2022 22:25'!cambiarLuzOriginal: i at: j	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:42'!cambiarLuzfilaColumna: i at: j	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:54'!cambiarLuz:i at:j	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:43'!cambiarLuzDiagonal: i at: j	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 16:29'!nuevaluz: i at: j	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 16:58'!recorrerLuces 	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:54'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject 	"|a|	a:=contadorDeClicks.	a:= a+ anObject .	contadorDeClicks:=a"! !!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 16:59'!crearTablero  |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !----End fileIn----!!Partida commentStamp: 'Juancho 11/21/2022 17:15' prior: 0!Clase encargada de inicializar la partida. !!Partida methodsFor: 'initialize' stamp: 'Juancho 11/21/2022 17:21' prior: 33558325!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonales') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').self modoJuego: opcion.self tamaño.! !----SNAPSHOT----2022-11-21T17:22:04.837204-03:00 Lights Out.image priorSource: 95!!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:28' prior: 33554981!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion <> 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:28' prior: 33563575!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion !!= 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:30' prior: 33564096!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion =!! 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:30' prior: 33564618!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion !!== 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:30' prior: 33565140!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion <> 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:31' prior: 33565663!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion !!= 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:31' prior: 33566184!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion !!== 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:31' prior: 33566706!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion ~= 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:32' prior: 33567229!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion = 2)ifTrue:[^UIManager default alert: 'Juego Cerrado '].(opcion ~= 2)ifTrue:[^UIManager default alert: 'Juego Cancelado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:33' prior: 33567750!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion ~= 1)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:35' prior: 33568338!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion ~= 1)ifTrue:[^UIManager default alert: 'Juego Cerrado'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!Partida methodsFor: 'initialize' stamp: 'Juancho 11/21/2022 17:35' prior: 33563157!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonales') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').(opcion ~= #(1 2 3)) ifTrue: [ ^UIManager default alert: 'Juego Cerrado' ].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'initialize' stamp: 'Juancho 11/21/2022 17:37' prior: 33569373!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonales') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').(opcion ~= 1) ifTrue: [ ^UIManager default alert: 'Juego Cerrado' ].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'initialize' stamp: 'Juancho 11/21/2022 17:38' prior: 33569777!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonales') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').(opcion ~= 1) ifTrue: [ ^UIManager default alert: 'Juego Cerrado' ].(opcion ~= 2) ifTrue: [ ^UIManager default alert: 'Juego Cerrado' ].(opcion ~= 3) ifTrue: [ ^UIManager default alert: 'Juego Cerrado' ].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'initialize' stamp: 'Juancho 11/21/2022 17:38' prior: 33570174!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonales') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/21/2022 17:50' prior: 33557547!tamaño	|tam|"Se pide al usuario que elija el tamaño del tablero"	tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) 	message:'Seleccione el tamaño del tablero' title:'Lights Out').	(tam includes: #(3 5 7)) ifTrue: [ ^dimensionTablero:=tam ].	^UIManager alert: 'Juego Cancelado'.	! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/21/2022 17:50' prior: 33571036!tamaño	|tam|"Se pide al usuario que elija el tamaño del tablero"	tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) 	message:'Seleccione el tamaño del tablero' title:'Lights Out').	(tam includes: #(3 5 7)) ifTrue: [ ^dimensionTablero:=tam ].	^UIManager inform: 'Juego Cancelado'.	! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/21/2022 17:51' prior: 33571452!tamaño	|tam|"Se pide al usuario que elija el tamaño del tablero"	tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) 	message:'Seleccione el tamaño del tablero' title:'Lights Out').	(tam includes: #(1 2 3)) ifTrue: [ ^dimensionTablero:=tam ].	^UIManager inform: 'Juego Cancelado'.	! !!LightsOut methodsFor: 'initialization' stamp: 'Juancho 11/21/2022 17:51' prior: 33568859!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion ~= 1)ifTrue:[ ^UIManager default alert: 'Juego Cerrado' ].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/21/2022 17:51' prior: 33571869!tamaño	|tam|"Se pide al usuario que elija el tamaño del tablero"	tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) 	message:'Seleccione el tamaño del tablero' title:'Lights Out').	^dimensionTablero:=tam	! !Smalltalk globals removeClassNamed: #AnObsoleteTablero!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoletePartida!Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/21/2022 16:46'!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 16:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !!LightsOut class methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 12:29'!iniciarJuego|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[ ^UIManager default alert: 'Juego Cerrado '].! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:31'!cantClicks	^ UIManager default alert: 'Ganaste con ', (cantClicks)asString  , ' clicks.'! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:43'!tamaño|tam|"Se pide al usuario que elija el tamaño del tablero"tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out').	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'initialize' stamp: 'Mauri 11/18/2022 20:02'!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Alternativo') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').self modoJuego: opcion.self tamaño.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 12:01'!cerrar^self delete ! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Juannie 11/16/2022 22:25'!cambiarLuzOriginal: i at: j	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:42'!cambiarLuzfilaColumna: i at: j	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:54'!cambiarLuz:i at:j	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:43'!cambiarLuzDiagonal: i at: j	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 16:29'!nuevaluz: i at: j	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 16:58'!recorrerLuces 	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:54'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject 	"|a|	a:=contadorDeClicks.	a:= a+ anObject .	contadorDeClicks:=a"! !!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 16:59'!crearTablero  |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !----End fileIn----!Smalltalk globals removeClassNamed: #AnObsoletePartida!Smalltalk globals removeClassNamed: #AnObsoleteTablero!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/21/2022 16:46'!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[^UIManager default alert: 'Juego Cerrado '].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 16:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !!LightsOut class methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 12:29'!iniciarJuego|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[ ^UIManager default alert: 'Juego Cerrado '].! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:31'!cantClicks	^ UIManager default alert: 'Ganaste con ', (cantClicks)asString  , ' clicks.'! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:43'!tamaño|tam|"Se pide al usuario que elija el tamaño del tablero"tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out').	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'initialize' stamp: 'Mauri 11/18/2022 20:02'!initialize |opcion|opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Alternativo') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out').self modoJuego: opcion.self tamaño.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 12:01'!cerrar^self delete ! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Juannie 11/16/2022 22:25'!cambiarLuzOriginal: i at: j	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:42'!cambiarLuzfilaColumna: i at: j	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:54'!cambiarLuz:i at:j	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:43'!cambiarLuzDiagonal: i at: j	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 16:29'!nuevaluz: i at: j	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 16:58'!recorrerLuces 	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:54'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject 	"|a|	a:=contadorDeClicks.	a:= a+ anObject .	contadorDeClicks:=a"! !!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 16:59'!crearTablero  |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !----End fileIn----!Tablero removeSelector: #cerrar!!Tablero methodsFor: 'initialize' stamp: 'Juancho 11/21/2022 18:16' prior: 33589848!crearTablero  |luz lado |	self tamaño.	self useRoundedCorners.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Smalltalk globals removeClassNamed: #AnObsoleteTablero!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoletePartida!Object subclass: #LightsOut	instanceVariableNames: 'ventana'	classVariableNames: 'Juego Table'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/21/2022 17:58'!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 16:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !!LightsOut class methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 12:29'!iniciarJuego|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[ ^UIManager default alert: 'Juego Cerrado '].! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 17:37'!cantClicks	^ UIManager default alert: 'Ganaste con ', (cantClicks)asString  , ' clicks.' title: 'Lights Out'.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 17:53'!tamaño|tam|"Se pide al usuario que elija el tamaño del tablero"tam:=nil.[ tam isNil ]whileTrue: [tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out')].	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 17:49'!initialize |opcion|opcion:=nil.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Alternativo') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 12:01'!cerrar^self delete ! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Juannie 11/16/2022 22:25'!cambiarLuzOriginal: i at: j	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:42'!cambiarLuzfilaColumna: i at: j	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:54'!cambiarLuz:i at:j	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:43'!cambiarLuzDiagonal: i at: j	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 16:29'!nuevaluz: i at: j	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 16:58'!recorrerLuces 	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:54'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject 	"|a|	a:=contadorDeClicks.	a:= a+ anObject .	contadorDeClicks:=a"! !!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 16:59'!crearTablero  |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !----End fileIn----!!Tablero methodsFor: 'accessing' stamp: 'Juancho 11/21/2022 18:25' prior: 33598764!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject ! !!Partida commentStamp: 'Juancho 11/21/2022 18:25' prior: 0!Clase encargada de desplegar el menú de bienvenida e inicialización del juego.!Smalltalk globals removeClassNamed: #AnObsoletePartida!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoleteTablero!Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Object subclass: #LightsOut	instanceVariableNames: 'ventana'	classVariableNames: 'Juego Table'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/21/2022 17:58'!initialize |opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 16:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !!LightsOut class methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 12:29'!iniciarJuego|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion=2)ifTrue:[ ^UIManager default alert: 'Juego Cerrado '].! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 17:37'!cantClicks	^ UIManager default alert: 'Ganaste con ', (cantClicks)asString  , ' clicks.' title: 'Lights Out'.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 17:53'!tamaño|tam|"Se pide al usuario que elija el tamaño del tablero"tam:=nil.[ tam isNil ]whileTrue: [tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out')].	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 17:49'!initialize |opcion|opcion:=nil.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Alternativo') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 12:01'!cerrar^self delete ! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Juannie 11/16/2022 22:25'!cambiarLuzOriginal: i at: j	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:42'!cambiarLuzfilaColumna: i at: j	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:54'!cambiarLuz:i at:j	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/19/2022 19:43'!cambiarLuzDiagonal: i at: j	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 16:29'!nuevaluz: i at: j	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 16:58'!recorrerLuces 	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 16:54'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject 	"|a|	a:=contadorDeClicks.	a:= a+ anObject .	contadorDeClicks:=a"! !!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 16:59'!crearTablero  |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !----End fileIn----!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Smalltalk globals removeClassNamed: #AnObsoletePartida!Smalltalk globals removeClassNamed: #AnObsoleteTablero!Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/21/2022 23:22'!initialize "Es el encargado de manejar nuestro juego"|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 18:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:23'!cantClicks"Muestra el mensaje de fin de juego"	^ UIManager default alert: 'Ganaste con ', (cantClicks)asString  , ' clicks.' title: 'Lights Out'.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:23'!tamaño"Se pide al usuario que elija el tamaño del tablero"|tam|tam:=nil.[ tam isNil ]whileTrue: [tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out')].	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 23:14'!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal') values: #(1 2 3) lines: #(1 2 3) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:24'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject ! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzOriginal: i at: j"Prende o apaga las luces del modo de juego original,es decir las adyacentes"	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzfilaColumna: i at: j"Prende o apaga las luces en la fila y columna de la luz precionada"	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:22'!cambiarLuz:i at:j"Depende del modo de juego que se eligio anteriormente se apagan o se prenden las luces segun el modo de juego"	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:22'!cambiarLuzDiagonal: i at: j"Prende o apaga las luces en diagonal de la luz precionada"	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:26'!nuevaluz: i at: j"Instanciamos una nueva luz y le asignamos una posicion en nuestro arreglo "	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 23:22'!crearTablero "Es nuestro initialize pero lo llamamos una vez que le pasamos los valores del tamaño del tablero y modo de juego" |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 23:26'!recorrerLuces "Recorremos las luces para verificar si estan todas apagadas"	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 23:24'!cerrar"Borrar el tablero"^self delete ! !----End fileIn----!!Partida commentStamp: 'Juancho 11/21/2022 23:54' prior: 0!Clase encargada de pedir los datos.!----SNAPSHOT----2022-11-21T23:56:37.876204-03:00 Lights Out.image priorSource: 8967!!Partida methodsFor: 'accessing' stamp: 'Juancho 11/22/2022 19:04' prior: 33611082!cantClicks"Muestra el mensaje de fin de juego"	^ UIManager default message: 'Ganaste con ', (cantClicks)asString  , ' clicks.' title: 'Lights Out'.! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/22/2022 19:07' prior: 33617661!cantClicks"Muestra el mensaje de fin de juego"	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones, has ganado el Lights Out!!'.! !----SNAPSHOT----2022-11-22T19:49:17.355923-03:00 Lights Out.image priorSource: 63058!----SNAPSHOT----2022-11-22T19:49:20.442923-03:00 Lights Out.image priorSource: 63667!----SNAPSHOT----2022-11-22T19:49:22.588923-03:00 Lights Out.image priorSource: 63754!----SNAPSHOT----2022-11-22T19:50:19.915923-03:00 Lights Out.image priorSource: 63841!----SNAPSHOT----2022-11-22T19:52:17.219923-03:00 Lights Out.image priorSource: 63928!!Partida methodsFor: 'accessing' stamp: 'Juancho 11/23/2022 01:20' prior: 33617898!cantClicks"Muestra el mensaje de fin de juego"	(cantClicks < 7) ifTrue: [ ^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks. 卍 ' title: '¡Felicitaciones, has ganado el Lights Out!!'. ].	! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/23/2022 01:52' prior: 33618619!cantClicks"Muestra el mensaje de fin de juego"	(cantClicks < 9 & modoJuego = 1) | (cantClicks < 25 & modoJuego = 2) | (cantClicks < 49 & modoJuego = 3) ifTrue: [ ^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks. Puntuación: ' title: '¡Felicitaciones, has ganado el Lights Out!!'. ].	! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/23/2022 01:52' prior: 33618942!cantClicks"Muestra el mensaje de fin de juego"	((cantClicks < 9 & modoJuego = 1) | (cantClicks < 25 & modoJuego = 2) | (cantClicks < 49 & modoJuego = 3)) ifTrue: [ ^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks. Puntuación: ' title: '¡Felicitaciones, has ganado el Lights Out!!'. ].	! !!Partida methodsFor: 'accessing' stamp: 'Juancho 11/23/2022 01:53' prior: 33619362!cantClicks"Muestra el mensaje de fin de juego"	((cantClicks < 9 & modoJuego = 1) or: (cantClicks < 25 & modoJuego = 2) or: (cantClicks < 49 & modoJuego = 3)) ifTrue: [ ^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks. Puntuación: ' title: '¡Felicitaciones, has ganado el Lights Out!!'. ].	! !Smalltalk globals removeClassNamed: #AnObsoletePartida!Smalltalk globals removeClassNamed: #AnObsoleteTablero!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Object subclass: #Jugador	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Jugador methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 15:41'!initialize |jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias')].self nombre: jugador! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre: anObject	nombre := anObject! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre	^ nombre! !Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Juga Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/23/2022 11:26'!initialize "Es el encargado de manejar nuestro juego"|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juga:=Jugador new.Juego:= Partida new.Juego jugador: Juga nombre.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 18:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida commentStamp: 'Juancho 11/21/2022 23:54' prior: 0!Clase encargada de pedir los datos.!!Partida methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 11:20'!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Aleatorio') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 11:07'!jugador: anObject	jugador := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 16:18'!cantClicks"Muestra el mensaje de fin de juego"	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(self jugador),', has ganado el Lights Out!!'.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 11:07'!jugador	^ jugador! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:23'!tamaño"Se pide al usuario que elija el tamaño del tablero"|tam|tam:=nil.[ tam isNil ]whileTrue: [tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out')].	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 23:22'!crearTablero "Es nuestro initialize pero lo llamamos una vez que le pasamos los valores del tamaño del tablero y modo de juego" |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 23:24'!cerrar"Borrar el tablero"^self delete ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:24'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:26'!nuevaluz: i at: j"Instanciamos una nueva luz y le asignamos una posicion en nuestro arreglo "	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzfilaColumna: i at: j"Prende o apaga las luces en la fila y columna de la luz precionada"	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:19'!cambiarLuz:i at:j"Depende del modo de juego que se eligio anteriormente se apagan o se prenden las luces segun el modo de juego"	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].	(self modoJuego=4)ifTrue:[ self cambiarLuzAleatorio: i at: j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:49'!cambiarLuzAleatorio: i at: j"Cambia las luces aleatoriamente.Es una mezcla de los modos de juegos anteriores"|a|a:=#(1 2 3 4 5)atRandom.(a=1)ifTrue: [ self cambiarLuzOriginal: i at: j ]ifFalse:[(a=2)ifTrue:[ 1 to: self tamaño do: [ :x| (celdas at: i at:x)toggleState .self recorrerLuces ] ]	ifFalse:[(a=3)ifTrue:[ 1 to: self tamaño do: [ :y| (celdas at: y at:j)toggleState .self recorrerLuces ]]	ifFalse:[(a=4)ifTrue:[self cambiarLuzfilaColumna: i at: j]	ifFalse:[self cambiarLuzDiagonal: i at:j]]]].! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:22'!cambiarLuzDiagonal: i at: j"Prende o apaga las luces en diagonal de la luz precionada"	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzOriginal: i at: j"Prende o apaga las luces del modo de juego original,es decir las adyacentes"	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 23:26'!recorrerLuces "Recorremos las luces para verificar si estan todas apagadas"	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !----End fileIn----!!Jugador commentStamp: 'Juancho 11/23/2022 16:28' prior: 0!Clase que retiene algún alias proporcionado por el usuario.!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoleteTablero!Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Smalltalk globals removeClassNamed: #AnObsoletePartida!Smalltalk globals removeClassNamed: #AnObsoleteJugador!Object subclass: #Jugador	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Jugador methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 15:41'!initialize |jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias')].self nombre: jugador! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre: anObject	nombre := anObject! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre	^ nombre! !Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Juga Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/23/2022 11:26'!initialize "Es el encargado de manejar nuestro juego"|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juga:=Jugador new.Juego:= Partida new.Juego jugador: Juga nombre.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 18:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida commentStamp: 'Juancho 11/21/2022 23:54' prior: 0!Clase encargada de pedir los datos.!!Partida methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 11:20'!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Aleatorio') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 11:07'!jugador: anObject	jugador := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 16:18'!cantClicks"Muestra el mensaje de fin de juego"	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(self jugador),', has ganado el Lights Out!!'.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 11:07'!jugador	^ jugador! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:23'!tamaño"Se pide al usuario que elija el tamaño del tablero"|tam|tam:=nil.[ tam isNil ]whileTrue: [tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out')].	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 23:22'!crearTablero "Es nuestro initialize pero lo llamamos una vez que le pasamos los valores del tamaño del tablero y modo de juego" |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 23:24'!cerrar"Borrar el tablero"^self delete ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:24'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:26'!nuevaluz: i at: j"Instanciamos una nueva luz y le asignamos una posicion en nuestro arreglo "	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzfilaColumna: i at: j"Prende o apaga las luces en la fila y columna de la luz precionada"	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:19'!cambiarLuz:i at:j"Depende del modo de juego que se eligio anteriormente se apagan o se prenden las luces segun el modo de juego"	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].	(self modoJuego=4)ifTrue:[ self cambiarLuzAleatorio: i at: j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:49'!cambiarLuzAleatorio: i at: j"Cambia las luces aleatoriamente.Es una mezcla de los modos de juegos anteriores"|a|a:=#(1 2 3 4 5)atRandom.(a=1)ifTrue: [ self cambiarLuzOriginal: i at: j ]ifFalse:[(a=2)ifTrue:[ 1 to: self tamaño do: [ :x| (celdas at: i at:x)toggleState .self recorrerLuces ] ]	ifFalse:[(a=3)ifTrue:[ 1 to: self tamaño do: [ :y| (celdas at: y at:j)toggleState .self recorrerLuces ]]	ifFalse:[(a=4)ifTrue:[self cambiarLuzfilaColumna: i at: j]	ifFalse:[self cambiarLuzDiagonal: i at:j]]]].! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:22'!cambiarLuzDiagonal: i at: j"Prende o apaga las luces en diagonal de la luz precionada"	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzOriginal: i at: j"Prende o apaga las luces del modo de juego original,es decir las adyacentes"	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 23:26'!recorrerLuces "Recorremos las luces para verificar si estan todas apagadas"	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !----End fileIn----!Smalltalk globals removeClassNamed: #AnObsoletePartida!Smalltalk globals removeClassNamed: #AnObsoleteLightsOut!Smalltalk globals removeClassNamed: #AnObsoleteLuz!Smalltalk globals removeClassNamed: #AnObsoleteTablero!Smalltalk globals removeClassNamed: #AnObsoleteJugador!Object subclass: #Jugador	instanceVariableNames: 'nombre'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Jugador methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 15:41'!initialize |jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias')].self nombre: jugador! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre: anObject	nombre := anObject! !!Jugador methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 10:58'!nombre	^ nombre! !Object subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Juga Table Ventana'	poolDictionaries: ''	category: 'Lights Out'!!LightsOut commentStamp: 'Juani 11/17/2022 23:58' prior: 0!Juego Lights Out. Esta clase se encarga de iniciar la pantalla de bienvenida.!!LightsOut methodsFor: 'initialization' stamp: 'Mauri 11/23/2022 17:07'!initialize "Es el encargado de manejar nuestro juego"|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!LightsOut class	instanceVariableNames: ''!!LightsOut class methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 18:48'!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	! !SimpleSwitchMorph subclass: #Luz	instanceVariableNames: 'comportamientoCursor'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Luz commentStamp: 'Juani 11/18/2022 00:01' prior: 0!Clase encargada de la creación de las luces. Se encarga de la estética de las mismas, como así también a su estado inicial (prendida/apagada).!!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:26'!comportamientoCursor: aBlock	comportamientoCursor := aBlock! !!Luz methodsFor: 'accessing' stamp: 'Anonymous 11/15/2022 20:28'!mouseUp: anEvent	self toggleState.	comportamientoCursor value ! !!Luz methodsFor: 'initialization' stamp: 'Juannie 11/16/2022 18:45'!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightGreen .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Partida commentStamp: 'Juancho 11/21/2022 23:54' prior: 0!Clase encargada de pedir los datos.!!Partida methodsFor: 'initialize' stamp: 'Mauri 11/23/2022 17:06'!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Aleatorio') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:03'!cantClicks: anObject	cantClicks := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 17:08'!cantClicks"Muestra el mensaje de fin de juego"	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 19:02'!modoJuego: anObject	modoJuego := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/23/2022 11:07'!jugador	^ jugador! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:23'!tamaño"Se pide al usuario que elija el tamaño del tablero"|tam|tam:=nil.[ tam isNil ]whileTrue: [tam := (UIManager default chooseFrom: #('3x3' '5x5' '7x7') values: #(3 5 7) lines: #(1 2 3) message:'Seleccione el tamaño del tablero' title:'Lights Out')].	^dimensionTablero:=tam! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:41'!dimensionTablero: anObject	dimensionTablero := anObject! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:50'!modoJuego	^ modoJuego! !!Partida methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 18:55'!dimensionTablero 	^ dimensionTablero ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Partida class	instanceVariableNames: 'tamaño'!BorderedMorph subclass: #Tablero	instanceVariableNames: 'celdas tamaño contadorDeClicks modoJuego cambiarLuz'	classVariableNames: ''	poolDictionaries: ''	category: 'Lights Out'!!Tablero commentStamp: 'Juani 11/18/2022 00:00' prior: 0!La clase T ablero es la encargada de inicializar el tablero, de los distintos modos de juego como así también de controlar si el jugador completó la partida.!!Tablero methodsFor: 'initialize' stamp: 'Mauri 11/21/2022 23:22'!crearTablero "Es nuestro initialize pero lo llamamos una vez que le pasamos los valores del tamaño del tablero y modo de juego" |luz lado |	self tamaño.	self useRoundedCorners.	self tamaño.	luz := Luz new.	lado:= luz width.	self bounds: (0@0 extent: (lado * tamaño) @ (lado * tamaño)+ (2* borderWidth) ).	self color: Color black.		celdas:= Array2D new: tamaño tabulate: [ :i :j | self  nuevaluz: i at: j  ].	contadorDeClicks:=1.	! !!Tablero methodsFor: 'finalization' stamp: 'Mauri 11/21/2022 23:24'!cerrar"Borrar el tablero"^self delete ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 12:11'!contadorDeClicks	^ contadorDeClicks! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego: anObject	modoJuego := anObject! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 21:13'!tamaño: anObject	tamaño := anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/21/2022 23:24'!contadorDeClicks: anObject	contadorDeClicks := contadorDeClicks+anObject ! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/18/2022 20:20'!tamaño	^ tamaño! !!Tablero methodsFor: 'accessing' stamp: 'Mauri 11/19/2022 19:23'!modoJuego	^ modoJuego! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:26'!nuevaluz: i at: j"Instanciamos una nueva luz y le asignamos una posicion en nuestro arreglo "	| luz origen |	luz := Luz new.	origen := self innerBounds origin.	self addMorph: luz.	luz position: ((i - 1) * luz width) @ ((j - 1) * luz height) + origen.		luz comportamientoCursor: [ self cambiarLuz: i at: j ].		^ luz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzfilaColumna: i at: j"Prende o apaga las luces en la fila y columna de la luz precionada"	1 to: tamaño do: [ :x| (celdas at: i at:x)toggleState  ].	1 to: tamaño do: [ :y| (celdas at: y at:j)toggleState  ].	self recorrerLuces! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:19'!cambiarLuz:i at:j"Depende del modo de juego que se eligio anteriormente se apagan o se prenden las luces segun el modo de juego"	(self modoJuego=1)ifTrue: [ self cambiarLuzOriginal: i at: j ].	(self modoJuego=2)ifTrue: [ self cambiarLuzfilaColumna: i at: j ].	(self modoJuego=3)ifTrue:[ self cambiarLuzDiagonal:i at:j ].	(self modoJuego=4)ifTrue:[ self cambiarLuzAleatorio: i at: j ].^ cambiarLuz! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/23/2022 11:49'!cambiarLuzAleatorio: i at: j"Cambia las luces aleatoriamente.Es una mezcla de los modos de juegos anteriores"|a|a:=#(1 2 3 4 5)atRandom.(a=1)ifTrue: [ self cambiarLuzOriginal: i at: j ]ifFalse:[(a=2)ifTrue:[ 1 to: self tamaño do: [ :x| (celdas at: i at:x)toggleState .self recorrerLuces ] ]	ifFalse:[(a=3)ifTrue:[ 1 to: self tamaño do: [ :y| (celdas at: y at:j)toggleState .self recorrerLuces ]]	ifFalse:[(a=4)ifTrue:[self cambiarLuzfilaColumna: i at: j]	ifFalse:[self cambiarLuzDiagonal: i at:j]]]].! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:22'!cambiarLuzDiagonal: i at: j"Prende o apaga las luces en diagonal de la luz precionada"	((i=1) and: (j<tamaño))ifTrue:[ (celdas at: i + 1 at: j + 1) toggleState ].	((i=1) and: (j>1))ifTrue:[ (celdas at: i + 1 at: j - 1) toggleState ]. 	((i=tamaño) and: (j<tamaño))ifTrue:[(celdas at: i - 1 at: j + 1) toggleState].	((i=tamaño) and: (j>1))ifTrue:[(celdas at: i - 1 at: j - 1) toggleState]. 	((j=1) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j + 1) toggleState.													(celdas at: i + 1 at: j + 1) toggleState].	((j=tamaño) and: (i between: 2  and:tamaño-1 ))ifTrue:[													(celdas at: i - 1 at: j - 1) toggleState.													(celdas at: i + 1 at: j - 1) toggleState].	((j between: 2  and: tamaño-1) & (i between: 2  and: tamaño-1 ))ifTrue:[														(celdas at: i - 1 at: j - 1) toggleState.														(celdas at: i - 1 at: j + 1) toggleState.														(celdas at: i + 1 at: j - 1) toggleState.														(celdas at: i + 1 at: j + 1) toggleState].	self recorrerLuces.! !!Tablero methodsFor: 'logicaDelJuego' stamp: 'Mauri 11/21/2022 23:21'!cambiarLuzOriginal: i at: j"Prende o apaga las luces del modo de juego original,es decir las adyacentes"	(i > 1) ifTrue: [ (celdas at: i - 1 at: j) toggleState ].		(i < tamaño ) ifTrue: [ (celdas at: i + 1 at: j) toggleState ].		(j > 1) ifTrue: [ (celdas at: i at: j - 1) toggleState ].		(j < tamaño) ifTrue: [ (celdas at: i at: j + 1) toggleState ].		self recorrerLuces.! !!Tablero methodsFor: 'condiciónDeCierre' stamp: 'Mauri 11/21/2022 23:26'!recorrerLuces "Recorremos las luces para verificar si estan todas apagadas"	| bandera |	bandera:= true.	1 to: tamaño do: [ :i | 		1 to: tamaño do: [ :j | (celdas at: i at: j) isOn ifFalse: [ bandera := false ] ] ].		bandera ifFalse: [ self contadorDeClicks:1 ].	bandera ifTrue: [LightsOut terminarJuego].! !----End fileIn----!!Jugador commentStamp: 'Juancho 11/23/2022 17:20' prior: 0!Clase encargada de registrar el nombre del usuario.!----SNAPSHOT----2022-11-23T19:57:59.087746-03:00 Lights Out.image priorSource: 64015!----SNAPSHOT----2022-11-23T20:00:00.098653-03:00 Lights Out.image priorSource: 98060!----SNAPSHOT----2022-11-23T20:00:05.920653-03:00 Lights Out.image priorSource: 98147!!Partida methodsFor: 'initialize' stamp: 'Anonymous 11/22/2023 14:15' prior: 33645127!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Competitivo') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!LightsOut class methodsFor: 'finalization' stamp: 'Anonymous 11/22/2023 14:16' prior: 33643617!terminarJuego	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	Juego:= Partida new.	Table:= Tablero new .	Table tamaño:Juego dimensionTablero.	Table modoJuego:Juego modoJuego.	Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'.	! !!LightsOut class methodsFor: 'finalization' stamp: 'Anonymous 11/22/2023 14:18' prior: 33653335!terminarJuego	|opcion|	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').	(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].	Juego:= Partida new.	Table:= Tablero new .	Table tamaño:Juego dimensionTablero.	Table modoJuego:Juego modoJuego.	Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'.	! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:20' prior: 33645702!cantClicks"Muestra el mensaje de fin de juego"	(modoJuego = 4) ifTrue:[		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !Object subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador ranking'	classVariableNames: ''	package: 'Lights Out'!!Luz methodsFor: 'initialization' stamp: 'Anonymous 11/22/2023 14:21' prior: 33644418!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightBlue .	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !!Partida methodsFor: 'initialize' stamp: 'Anonymous 11/22/2023 14:25' prior: 33652841!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.ranking:= Dictionary new.ranking at: '000' put: 0.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Competitivo') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:32' prior: 33654368!cantClicks"Muestra el mensaje de fin de juego"	(modoJuego = 4) ifTrue:[		ranking at: (jugador nombre) put: (cantClicks).		ranking keysAndValuesDo: [ :name :points |			UIManager default inform: name, 'puntos: ', points asString.		].		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:33' prior: 33656067!cantClicks"Muestra el mensaje de fin de juego"	(modoJuego = 4) ifTrue:[		ranking at: (jugador nombre) put: (cantClicks).		ranking keysAndValuesDo: [ :name :points |			UIManager default inform: name, '- Puntaje: ', points asString.		].		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:37' prior: 33656778!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) && (dimensionTablero=3)) ifTrue:[		ranking at: (jugador nombre) put: (cantClicks).		ranking keysAndValuesDo: [ :name :points |			UIManager default inform: name, '- Puntaje: ', points asString.		].		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:37' prior: 33657492!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero=3)) ifTrue:[		ranking at: (jugador nombre) put: (cantClicks).		ranking keysAndValuesDo: [ :name :points |			UIManager default inform: name, '- Puntaje: ', points asString.		].		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:40' prior: 33658232!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero=5)) ifTrue:[		ranking at: (jugador nombre) put: (cantClicks).		ranking keysAndValuesDo: [ :name :points |			UIManager default inform: name, '- Puntaje: ', points asString.		].		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:40' prior: 33658971!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero=3)) ifTrue:[		ranking at: (jugador nombre) put: (cantClicks).		ranking keysAndValuesDo: [ :name :points |			UIManager default inform: name, '- Puntaje: ', points asString.		].		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !!Partida methodsFor: 'initialize' stamp: 'Anonymous 11/22/2023 14:48' prior: 33655532!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.ranking:= Dictionary new.ranking at: '000' put: 99999.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Competitivo') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !Object subclass: #Rank instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Lights Out'!Rank	subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador ranking '	classVariableNames: ''	poolDictionaries: ''	category: #'Lights Out'!Rank subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador'	classVariableNames: ''	package: 'Lights Out'!Object subclass: #Rank	instanceVariableNames: 'ranking'	classVariableNames: ''	package: 'Lights Out'!!Rank methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/22/2023 14:51'!cargarRanking	ranking:= Dictionary new.	ranking at: '000' put: 99999.! !!Partida methodsFor: 'initialize' stamp: 'Anonymous 11/22/2023 14:52' prior: 33660450!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Competitivo') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!Rank methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/22/2023 14:53' prior: 33661528!cargarRanking	ranking:= Dictionary new.	ranking at: 'AAA' put: 99999.! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/22/2023 14:54' prior: 33659710!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero=3)) ifTrue:[		ranking at: (jugador nombre)asString put: (cantClicks).		ranking keysAndValuesDo: [ :name :points |			UIManager default inform: name, '- Puntaje: ', points asString.		].		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out en modo competitivo!!'.		]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.].! !!Rank methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/22/2023 14:56' prior: 33662180!cargarRanking	ranking:= Dictionary new.! !!Partida methodsFor: 'initialize' stamp: 'Anonymous 11/22/2023 15:06' prior: 33661690!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.Rank cargarRanking.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Competitivo') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!LightsOut class methodsFor: 'finalization' stamp: 'Anonymous 11/24/2023 20:53' prior: 33643617!terminarJuego	|opcion|	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) 	message: 'Elija una opción' title: 'Lights Out').	(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].	Juego:= Partida new.	Table:= Tablero new .	Table tamaño:Juego dimensionTablero.	Table modoJuego:Juego modoJuego.	Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'.	! !----SNAPSHOT----2023-11-24T20:53:26.911164-03:00 Lights Out.image priorSource: 98234!!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 20:54' prior: 33645702!cantClicks"Muestra el mensaje de fin de juego"	(modoJuego = 4) ifTrue:[		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!Partida methodsFor: 'initialize' stamp: 'Anonymous 11/24/2023 20:55' prior: 33645127!initialize "Encargado de mostrar los mensajes por pantalla y almacenar los valores"|opcion|opcion:=nil.jugador:=Jugador new.[ opcion isNil  ]whileTrue:[opcion  := (UIManager default chooseFrom: #('Original' 'Filas y Columnas' 'Diagonal' 'Competitivo') values: #(1 2 3 4) lines: #(1 2 3 4) message:'Seleccione un modo de juego' title:'Lights Out')].self modoJuego: opcion.self tamaño.! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 20:56' prior: 33664456!cantClicks"Muestra el mensaje de fin de juego"	(modoJuego = 4 & dimensionTablero = 3) ifTrue:[		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 20:56' prior: 33665480!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !Object subclass: #Rank instanceVariableNames: '' classVariableNames: '' poolDictionaries: '' category: 'Lights Out'!Rank	subclass: #Partida	instanceVariableNames: 'modoJuego dimensionTablero cantClicks jugador '	classVariableNames: ''	poolDictionaries: ''	category: #'Lights Out'!Object subclass: #Rank	instanceVariableNames: 'ranking'	classVariableNames: ''	package: 'Lights Out'!!Rank methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/24/2023 20:59'!cargarRanking	ranking := Dictionary new.	ranking at: 'AAA' put: 0! !!Rank methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/24/2023 20:59' prior: 33666996!cargarRanking	ranking := Dictionary new.	ranking at: 'AAA' put: 0! !!ManifestLightsOut commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!!ManifestLightsOut class methodsFor: 'code-critics' stamp: 'Anonymous 11/24/2023 21:01'!ruleRBNoClassCommentRuleV1FalsePositive	^ #()! !!ManifestLightsOut class methodsFor: 'code-critics' stamp: 'Anonymous 11/24/2023 21:01' prior: 33667515!ruleRBNoClassCommentRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Rank)) #'2023-11-24T21:01:16.353164-03:00') )! !Smalltalk globals removeClassNamed: #AnObsoleteManifestLightsOut!!Rank methodsFor: 'setter' stamp: 'Anonymous 11/24/2023 21:02' prior: 33667160!cargarRanking"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 0! !!Rank methodsFor: 'setter' stamp: 'Anonymous 11/24/2023 21:03' prior: 33667937!cargarRanking	"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 0! !!Rank methodsFor: 'as yet unclassified' stamp: 'Anonymous 11/24/2023 21:04'!mostrarRanking	"comment stating purpose of message"	^UIManager inform: ranking 	! !Rank subclass: #LightsOut	instanceVariableNames: ''	classVariableNames: 'Juego Juga Table Ventana'	package: 'Lights Out'!!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:07' prior: 33642945!initialize "Es el encargado de manejar nuestro juego"|opcion|Rank cargarRanking.Rank mostrarRanking.opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:08' prior: 33668605!initialize "Es el encargado de manejar nuestro juego"|opcion|Rank new.Rank cargarRanking.Rank mostrarRanking.opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:08' prior: 33669230!initialize "Es el encargado de manejar nuestro juego"|opcion|opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:09' prior: 33669865!initialize "Es el encargado de manejar nuestro juego"|opcion|ranking:= Rank new.ranking:= Rank cargarRanking.ranking:= Rank mostrarRanking.opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!Rank methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 21:12' prior: 33668119!cargarRanking	"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 0.! !!Rank methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:14' prior: 33668299!mostrarRanking	"comment stating purpose of message"	^(UIManager inform: ranking)	! !Rank removeSelector: #cargarRanking!!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 21:14'!cargarRanking	"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 0.! !Rank removeSelector: #mostrarRanking!!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:14'!mostrarRanking	"comment stating purpose of message"	^(UIManager inform: ranking)	! !Object subclass: #Rank	instanceVariableNames: ''	classVariableNames: 'ranking'	package: 'Lights Out'!!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 21:16' prior: 33666043!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		ranking:= Rank mostrarRanking.		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:16' prior: 33670450!initialize "Es el encargado de manejar nuestro juego"|opcion|ranking:= Rank new.ranking:= Rank cargarRanking.opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:20'!mostrar	"comment stating purpose of message"	^(UIManager inform: ranking)	! !!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 21:20'!cargar	"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 0.! !Rank class removeSelector: #cargarRanking!Rank class removeSelector: #mostrarRanking!Rank class	instanceVariableNames: 'ranking'!!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 21:22' prior: 33671986!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		ranking:= Rank mostrar.		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:22' prior: 33672593!initialize "Es el encargado de manejar nuestro juego"|opcion|ranking:= Rank new.ranking:= Rank cargar.opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 21:23'!iniciar	"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 0.! !!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:24' prior: 33674281!initialize "Es el encargado de manejar nuestro juego"|opcion|ranking:= Rank new.ranking:= Rank iniciar.opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 21:27'!cargar: player clicks: points	"Setea el ranking para su uso"	ranking at: player asString put: points.! !Rank class removeSelector: #cargar!!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 21:29' prior: 33673681!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		ranking:= Rank cargar: (jugador nombre) clicks: cantClicks.		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!LightsOut methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 21:29' prior: 33675081!initialize "Es el encargado de manejar nuestro juego"|opcion|ranking:= Rank new.ranking:= Rank iniciar.opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) message: 'Elija una opción' title: 'Lights Out').(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].Juego:= Partida new.Table:= Tablero new .Table tamaño:Juego dimensionTablero.Table modoJuego:Juego modoJuego.Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'. ! !!LightsOut class methodsFor: 'finalization' stamp: 'Anonymous 11/24/2023 21:30' prior: 33663740!terminarJuego	|opcion|	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	Rank mostrar.	opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) 	message: 'Elija una opción' title: 'Lights Out').	(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].	Juego:= Partida new.	Table:= Tablero new .	Table tamaño:Juego dimensionTablero.	Table modoJuego:Juego modoJuego.	Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'.	! !!LightsOut class methodsFor: 'finalization' stamp: 'Anonymous 11/24/2023 21:30' prior: 33677189!terminarJuego	|opcion|	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	ranking mostrar.	opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) 	message: 'Elija una opción' title: 'Lights Out').	(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].	Juego:= Partida new.	Table:= Tablero new .	Table tamaño:Juego dimensionTablero.	Table modoJuego:Juego modoJuego.	Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'.	! !!LightsOut class methodsFor: 'finalization' stamp: 'Anonymous 11/24/2023 21:32' prior: 33677844!terminarJuego	|opcion|	Juego cantClicks: Table contadorDeClicks .	Juego cantClicks.	Table cerrar.	Ventana close.	opcion:= (UIManager default chooseFrom: #('Jugar' 'Salir') values: #(1 2) lines: #(1 2) 	message: 'Elija una opción' title: 'Lights Out').	(opcion~=1)ifTrue:[^UIManager default alert: 'Juego Cerrado ' title: 'Lights Out'].	Juego:= Partida new.	Table:= Tablero new .	Table tamaño:Juego dimensionTablero.	Table modoJuego:Juego modoJuego.	Ventana:=Table crearTablero openInHand openInWindow setLabel:'Lights Out'.	! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 21:32' prior: 33675921!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		ranking:= Rank cargar: (jugador nombre) clicks: cantClicks.		ranking mostrar.		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:37' prior: 33673208!mostrar	"comment stating purpose of message"	ranking keysAndValuesDo: [ :nombre :puntos |    UIManager inform: 'Nombre: ', nombre, ' Puntaje; ', puntos.	].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:38' prior: 33679781!mostrar	"comment stating purpose of message"	ranking keysAndValuesDo: [ :nombre :puntos |    UIManager inform: 'Nombre: ', nombre, ' Puntaje; ', puntos asString.	].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:41' prior: 33680034!mostrar	"comment stating purpose of message"	|rankText|	ranking keysAndValuesDo: [ :nombre :puntos |		rankText := 'Nombre: ', nombre, ' Puntaje; ', puntos asString.	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:43' prior: 33680296!mostrar	"comment stating purpose of message"	|rankText|	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:43' prior: 33680591!mostrar	"comment stating purpose of message"	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:45' prior: 33680902!mostrar	"comment stating purpose of message"	|rankText|	rankText:= '	'.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:46' prior: 33681229!mostrar	"comment stating purpose of message"	|rankText|	rankText:= ' 	'.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:47' prior: 33681558!mostrar	"comment stating purpose of message"	|rankText|	rankText:= '  	'.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:48' prior: 33681888!mostrar	"comment stating purpose of message"	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:48' prior: 33682219!mostrar	"comment stating purpose of message"	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:53' prior: 33682546!mostrar	"comment stating purpose of message	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText"	    "Muestra el ranking ordenado por puntos"    | rankText sortedKeys |    "Obtiene las claves del Dictionary y las ordena según los puntos"    sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    rankText := ''.    "Recorre las claves ordenadas y construye el texto del ranking"    sortedKeys do: [ :nombre |        rankText := rankText, 'Nombre: ', nombre, ' Puntaje: ', (ranking at: nombre) asString, String lf.    ].    ^ UIManager inform: rankText.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:53' prior: 33682873!mostrar	"comment stating purpose of message	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText"	    "Muestra el ranking ordenado por puntos"    | rankText sortedKeys |    "Obtiene las claves del Dictionary y las ordena según los puntos"    sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    rankText := ''.    "Recorre las claves ordenadas y construye el texto del ranking"    sortedKeys do: [ :nombre |        rankText := rankText, 'Nombre: ', nombre, ' Puntaje: ', (ranking at: nombre) asString.    ].    ^ UIManager inform: rankText.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 21:55' prior: 33683712!mostrar	"comment stating purpose of message	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText"	"Muestra el ranking ordenado por puntos"    | rankTextStream sortedKeys |    "Obtiene las claves del Dictionary y las ordena según los puntos"    sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    "Usa un flujo de texto para construir el texto del ranking de manera eficiente"    rankTextStream := '' writeStream.    "Recorre las claves ordenadas y construye el texto del ranking"    sortedKeys do: [ :nombre |        rankTextStream            nextPutAll: 'Nombre: ', nombre, ' Puntaje: ', (ranking at: nombre) asString;            nextPutAll: String lf.    ].    ^ UIManager inform: rankTextStream contents.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:00' prior: 33684540!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: sortedKeys! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:05' prior: 33685645!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add: 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'        '.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:07' prior: 33686080!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add: 'Nombre: ', nombre, ' Puntaje; ', puntos asString.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText! !!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 22:08' prior: 33675691!cargar: player clicks: points	"Setea el ranking para su uso"	ranking at: player asString put: points.	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:09' prior: 33686690!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add: 'Nombre: ', nombre, ' Puntaje; ', puntos asString.     ].	rankText asSortedCollection.	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:09' prior: 33687486!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add: 'Nombre: ', nombre, ' Puntaje; ', puntos asString.     ].		"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:12' prior: 33688114!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add: 'Nombre: ', nombre, ' Puntaje; ', puntos asString.     ].	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: sortedKeys.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:14' prior: 33688734!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:nombre, puntos asString.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:18' prior: 33689335!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:puntos, nombre asString.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:18' prior: 33689820!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:puntos asString, nombre asString.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:18' prior: 33690305!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:puntos asString, nombre.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 22:21' prior: 33674890!iniciar	"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.	ranking at: 'AAA' put: 999.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:27' prior: 33690799!mostrar	"comment stating purpose of message"	|rankText|	"rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:puntos asString, nombre.     ]."	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText.! !!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 22:29' prior: 33691285!iniciar	"Setea el ranking para su uso"	ranking := Dictionary new.	ranking at: 'AAA' put: 999.	ranking at: 'BBB' put: 999.	ranking at: 'CCC' put: 999.	ranking at: 'DDD' put: 999.	ranking at: 'EEE' put: 999.	ranking at: 'FFF' put: 999.	ranking at: 'GGG' put: 999.	ranking at: 'HHH' put: 999.	ranking at: 'III' put: 999.	ranking at: 'JJJ' put: 999.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:29' prior: 33691734!mostrar	"comment stating purpose of message"	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText.! !!Rank class methodsFor: 'initalize' stamp: 'Anonymous 11/24/2023 22:35' prior: 33692201!iniciar	"Setea el ranking para su uso"	ranking := Dictionary new.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:36' prior: 33692650!mostrar	"comment stating purpose of message"	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:39' prior: 33693136!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText add: puntos asString,' ', nombre. 	].	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:42' prior: 33693481!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	rankText:= OrderedCollection new.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText add: puntos asString,' ', nombre. 	].	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	^UIManager inform: sortedKeys.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:43' prior: 33693810!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText add: puntos asString,' ', nombre. 	].	.	^UIManager inform: sortedKeys.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:44' prior: 33694228!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText add: puntos asString,' ', nombre. 	].	^UIManager inform: sortedKeys.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:44' prior: 33694649!mostrar	"comment stating purpose of message"	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText add: puntos asString,' ', nombre. 	].	^UIManager inform: ranking asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:48' prior: 33695067!mostrar	"comment stating purpose of message	|rankText sortedKeys|	sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].	rankText:= OrderedCollection new.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText add: puntos asString,' ', nombre. 	]."	"Muestra el ranking ordenado por puntos"    | rankText sortedKeys |    "Obtiene las claves del Dictionary y las ordena según los puntos"    sortedKeys := ranking keys asSortedCollection.    "Recorre las claves ordenadas y construye el texto del ranking"    rankText := sortedKeys collect: [ :nombre |        'Nombre: ', nombre, ' Puntaje: ', (ranking at: nombre) asString.    ] joinUsing: String lf.    ^ UIManager inform: rankText.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:49' prior: 33695501!mostrar    "comment stating purpose of message"    |rankText sortedKeys|    sortedKeys := ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    "rankText:= ''.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'        '.     ]."    ^UIManager inform: sortedKeys! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:51' prior: 33696333!mostrar	"comment stating purpose of message"	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre:', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:57' prior: 33696801!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:puntos asString, nombre.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:59' prior: 33697126!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,'Nombre: ', nombre.     ].	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 22:59' prior: 33697611!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre.     ].	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:03' prior: 33697970!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre.     ].	rankText asSortedCollection.	^UIManager inform: rankText.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:05' prior: 33698332!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText.! !!Jugador methodsFor: 'initialize' stamp: 'Anonymous 11/24/2023 23:07' prior: 33642218!initialize| jugador |jugador := ''.[    (UIManager default request: 'Ingrese su Nombre o Alias') do: [:c |        jugador := jugador, c asString.    ].    jugador isEmptyOrNil or: [jugador includesSubstring: ' ']] whileTrue: [].self nombre: jugador."|jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias')].self nombre: jugador"! !!Jugador methodsFor: 'initialize' stamp: 'Anonymous 11/24/2023 23:07' prior: 33699089!initialize |jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias')].self nombre: jugador! !!Jugador methodsFor: 'initialize' stamp: 'Anonymous 11/24/2023 23:09' prior: 33699599!initialize |jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias').jugador:=jugador copyWithout: ' '.].self nombre: jugador! !!Jugador methodsFor: 'initialize' stamp: 'Anonymous 11/24/2023 23:11' prior: 33699858!initialize |jugador|jugador:=nil.[jugador isNil or: jugador='']whileTrue:[ jugador:= (UIManager default request: 'Ingrese su Nombre o Alias').jugador copyWithout: ' '.].self nombre: jugador! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:17' prior: 33698705!mostrar	"comment stating purpose of message	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."		"comment stating purpose of message"	|rankText|	rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	].	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:18' prior: 33700440!mostrar	"comment stating purpose of message	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."			"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:puntos asString, nombre.     ].	"rankText:= ''.	ranking keysAndValuesDo: [ :nombre :puntos |		rankText :=rankText, 'Nombre: ', nombre, ' Puntaje; ', puntos asString,'		'. 	]."	^UIManager inform: rankText asSortedCollection.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:21' prior: 33701073!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText.	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:22' prior: 33701847!mostrar	"comment stating purpose of message"	|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText.	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:29' prior: 33702316!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"sortedKeys := (ranking keys asSortedCollection: [ :a :b | a <= b ])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:33' prior: 33702785!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"sortedKeys := (ranking value asSortedCollection: [ :a :b | a <= b ])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:34' prior: 33703556!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"sortedKeys := (ranking key asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:35' prior: 33704328!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	Transcript clear.sortedKeys := (ranking key asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:35' prior: 33705125!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	Transcript clear.	sortedKeys := (ranking key asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"	sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:35' prior: 33705941!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	Transcript clear.	sortedKeys := (ranking key asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:36' prior: 33706759!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking key asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:36' prior: 33707576!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking key asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.	  Transcript clear.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:36' prior: 33708374!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking key asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:37' prior: 33709193!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: key; show: ': '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:42' prior: 33709991!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    "Transcript show: key; show: ': '; show: value; cr."		UIManager inform: key, ': ', value.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:42' prior: 33710790!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    "Transcript show: key; show: ': '; show: value; cr."		UIManager inform: (key, ': ', value).].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:43' prior: 33711629!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.].		"|rankText|	rankText:= OrderedCollection new.	ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)].    ranking keysAndValuesDo: [ :nombre :puntos |        rankText add:'Puntaje: ',puntos asString,' - Nombre: ', nombre asUppercase.     ].	rankText asSortedCollection.	^UIManager inform: rankText."	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:43' prior: 33712470!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)])."Imprimir el diccionario ordenado por clave"sortedKeys do: [ :key |    | value |    value := ranking at: key.    Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.].! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:44' prior: 33713294!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).		"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:44' prior: 33713783!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).	Transcript clear.		"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:45' prior: 33714284!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).		"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 23:45' prior: 33679131!cantClicks"Muestra el mensaje de fin de juego"	Transcript clear.	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		ranking:= Rank cargar: (jugador nombre) clicks: cantClicks.		ranking mostrar.		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!Partida methodsFor: 'accessing' stamp: 'Anonymous 11/24/2023 23:45' prior: 33715303!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		ranking:= Rank cargar: (jugador nombre) clicks: cantClicks.		ranking mostrar.		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:45' prior: 33714804!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).		"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	Transcript clear.! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:46' prior: 33716620!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).		"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	Transcript clear! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:46' prior: 33717139!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).		"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript clear;show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:47' prior: 33717657!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).		"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:48' prior: 33718165!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).			"Imprimir el diccionario ordenado por clave"		Transcript clear.		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:48' prior: 33718667!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).			"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:50' prior: 33719190!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).			"Imprimir el diccionario ordenado por clave"		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show:'Ranking a la fecha: ';show: (Date today) asString;cr;show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:51' prior: 33719693!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).			"Imprimir el diccionario ordenado por clave"		Transcript show:'Ranking a la fecha: ';show: (Date today) asString;cr.		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	! !!Rank class methodsFor: 'accesing' stamp: 'Anonymous 11/24/2023 23:54' prior: 33720255!mostrar	"comment stating purpose of message"	|sortedKeys|	"Crear una colección ordenada por clave"	sortedKeys := (ranking keys asSortedCollection: [ :a :b | (ranking at: a) <= (ranking at: b)]).			"Imprimir el diccionario ordenado por clave"		Transcript cr;show:'Ranking a la fecha: ';show: (Date today) asString;cr.		sortedKeys do: [ :key |    		| value |    		value := ranking at: key.    		Transcript show: 'Nombre: ';show: key; show: ' Puntaje: '; show: value; cr.		].	! !!Luz methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 23:56' prior: 33644418!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryDarkGray .	offColor := Color lightBlue.	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !!Luz methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 23:56' prior: 33721409!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryLightGray .	offColor := Color lightBlue.	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !!Luz methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 23:58' prior: 33721869!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryLightGray .	offColor := Color blue.	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !!Luz methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 23:58' prior: 33722330!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color yellow.	offColor := Color blue.	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !!Luz methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 23:59' prior: 33722786!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryLightGray.	offColor := Color lightBlue.	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !!Luz methodsFor: 'initialization' stamp: 'Anonymous 11/24/2023 23:59' prior: 33723230!initialize	super initialize. 	self label: ''. "Para la celda no tenga un nombre"	self borderWidth: 10.	self useRoundedCorners. 	bounds := 0@0 corner: 80@80 . "tamaño de la celda"	onColor := Color veryVeryLightGray.	offColor := Color lightOrange.	#(true false) atRandom ifTrue: [ self turnOn  ]ifFalse: [ self turnOff  ]. "Le damos un valor aleatorio a las luces"! !----SNAPSHOT----2023-11-25T00:00:52.086164-03:00 Lights Out.image priorSource: 109850!----SNAPSHOT----2023-11-25T00:01:19.268164-03:00 Lights Out.image priorSource: 169632!!Partida methodsFor: 'accessing' stamp: 'Lean 11/26/2023 13:47' prior: 33715970!cantClicks"Muestra el mensaje de fin de juego"	((modoJuego = 4) & (dimensionTablero = 3)) ifTrue:[		ranking:= Rank cargar: (jugador nombre) clicks: cantClicks.		ranking mostrar.		^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out Competitivo!!'.	]	ifFalse:[	^ UIManager default message: 'Completaste la partida con ', (cantClicks)asString  , ' clicks.' title: '¡Felicitaciones ',(jugador nombre ),', has ganado el Lights Out!!'.	].! !